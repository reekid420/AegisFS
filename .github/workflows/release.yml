name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: AegisFS v${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
        body: |
          ## AegisFS v${{ steps.get_version.outputs.version }}
          
          ### Features
          - Advanced filesystem capabilities with snapshot support
          - FUSE-based implementation for userspace mounting
          - Built-in integrity checking and repair
          
          ### Installation
          Download the appropriate binary for your platform from the assets below.
          
          ### Checksums
          See the `checksums.txt` file for SHA256 checksums of all release assets.

  build-release:
    name: Build Release (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_suffix: ""
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary_suffix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_suffix: ".exe"
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_suffix: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_suffix: ""

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install platform dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        if [[ "${{ matrix.target }}" == *"musl"* ]]; then
          sudo apt-get install -y musl-tools
        fi
        sudo apt-get install -y fuse3 libfuse3-dev pkg-config

    - name: Install platform dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install macfuse pkg-config

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: release-${{ matrix.target }}
        workspaces: fs-core

    - name: Build release binary
      run: |
        cd fs-core
        cargo build --release --target ${{ matrix.target }} --all-features

    - name: Create release archive
      run: |
        mkdir -p release
        cd release
        
        # Copy binaries
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          cp ../fs-core/target/${{ matrix.target }}/release/aegisfs-*${{ matrix.binary_suffix }} .
        else
          cp ../fs-core/target/${{ matrix.target }}/release/aegisfs-* .
        fi
        
        # Copy documentation
        cp ../README.md .
        cp ../docs/architecture.md . || echo "No architecture.md found"
        
        # Create archive
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          7z a ../aegisfs-v${{ needs.create-release.outputs.version }}-${{ matrix.target }}.zip .
        else
          tar czf ../aegisfs-v${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz .
        fi
        
        cd ..

    - name: Generate checksums
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          certutil -hashfile aegisfs-v${{ needs.create-release.outputs.version }}-${{ matrix.target }}.zip SHA256 > aegisfs-v${{ needs.create-release.outputs.version }}-${{ matrix.target }}.zip.sha256
        else
          sha256sum aegisfs-v${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz > aegisfs-v${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz.sha256
        fi

    - name: Upload release archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./aegisfs-v${{ needs.create-release.outputs.version }}-${{ matrix.target }}${{ runner.os == 'Windows' && '.zip' || '.tar.gz' }}
        asset_name: aegisfs-v${{ needs.create-release.outputs.version }}-${{ matrix.target }}${{ runner.os == 'Windows' && '.zip' || '.tar.gz' }}
        asset_content_type: ${{ runner.os == 'Windows' && 'application/zip' || 'application/gzip' }}

    - name: Upload checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./aegisfs-v${{ needs.create-release.outputs.version }}-${{ matrix.target }}${{ runner.os == 'Windows' && '.zip' || '.tar.gz' }}.sha256
        asset_name: aegisfs-v${{ needs.create-release.outputs.version }}-${{ matrix.target }}${{ runner.os == 'Windows' && '.zip' || '.tar.gz' }}.sha256
        asset_content_type: text/plain

  publish-docker:
    name: Publish Docker Images
    runs-on: ubuntu-latest
    needs: [create-release, build-release]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      if: github.event_name != 'pull_request' && env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != ''
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ env.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: aegisfs/aegisfs
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' && env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        target: runtime 