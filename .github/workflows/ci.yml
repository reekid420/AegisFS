name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly security scans
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0

jobs:
  # Job 1: Quick checks (fastest feedback)
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: quick-checks
        workspaces: fs-core
    
    - name: Install FUSE development headers
      run: |
        sudo apt-get update
        sudo apt-get install -y fuse3 libfuse3-dev pkg-config
    
    - name: Check formatting
      run: |
        cd fs-core
        cargo fmt --all -- --check
    
    - name: Check Clippy
      run: |
        cd fs-core
        cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Check docs
      run: |
        cd fs-core
        cargo doc --no-deps --all-features

  # Job 2: Security and dependency scanning
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: security
        workspaces: fs-core
    
    - name: Install FUSE development headers
      run: |
        sudo apt-get update
        sudo apt-get install -y fuse3 libfuse3-dev pkg-config
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Security audit
      run: |
        cd fs-core
        cargo audit
    
    - name: Install cargo-deny
      run: cargo install cargo-deny
    
    - name: Check licenses and dependencies
      run: |
        cd fs-core
        cargo deny check

  # Job 3: Unit tests with coverage
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quick-checks
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: unit-tests
        workspaces: fs-core
    
    - name: Install FUSE development headers
      run: |
        sudo apt-get update
        sudo apt-get install -y fuse3 libfuse3-dev pkg-config
    
    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov
    
    - name: Run unit tests with coverage
      run: |
        cd fs-core
        cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info \
          -- --skip test_data_persistence
    
    - name: Upload coverage to Codecov
      if: env.CODECOV_TOKEN != ''
      uses: codecov/codecov-action@v3
      with:
        file: fs-core/lcov.info
        name: unit-tests
        token: ${{ env.CODECOV_TOKEN }}

  # Job 4: Integration tests (requires FUSE)
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: quick-checks
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: integration-tests
        workspaces: fs-core
    
    - name: Install FUSE development headers
      run: |
        sudo apt-get update
        sudo apt-get install -y fuse3 libfuse3-dev pkg-config
    
    - name: Enable FUSE for user
      run: |
        sudo modprobe fuse
        sudo chmod 666 /dev/fuse
        # Add user to fuse group if it exists
        sudo usermod -a -G fuse $USER || true
    
    - name: Run integration tests
      run: |
        # Run tests that require FUSE mounting
        cd fs-core
        cargo test --test persistence_test --test write_operations -- --test-threads=1
    
    - name: Upload test artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-artifacts
        path: |
          /tmp/aegisfs-*
          fs-core/target/debug/

  # Job 5: Cross-platform builds
  build-cross-platform:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: quick-checks
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: build-${{ matrix.os }}
        workspaces: fs-core
    
    - name: Install platform dependencies
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y fuse3 libfuse3-dev pkg-config
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install macfuse pkg-config
        fi
      shell: bash
    
    - name: Build all binaries
      run: |
        cd fs-core
        cargo build --release --all-targets --target ${{ matrix.target }}
    
    - name: Run basic tests (non-FUSE)
      run: |
        cd fs-core
        cargo test --lib --target ${{ matrix.target }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: aegisfs-${{ matrix.target }}
        path: |
          fs-core/target/${{ matrix.target }}/release/aegisfs-*
          !fs-core/target/${{ matrix.target }}/release/*.d
          !fs-core/target/${{ matrix.target }}/release/deps/

  # Job 6: Performance benchmarks
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [test-unit, test-integration]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for comparison
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: benchmarks
        workspaces: fs-core
    
    - name: Install FUSE and benchmark dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y fuse3 libfuse3-dev pkg-config
        cargo install cargo-criterion
    
    - name: Run benchmarks
      run: |
        # Create benchmark directory if it doesn't exist
        mkdir -p fs-core/benches
        # Run benchmarks and save results
        cd fs-core
        cargo criterion --message-format=json > ../benchmark-results.json || true
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark-results.json

  # Job 7: Docker build and test
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: quick-checks
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: aegisfs:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test in Docker container
      run: |
        docker run --rm --privileged \
          -v /dev/fuse:/dev/fuse \
          aegisfs:test bash -c "cd fs-core && cargo test --lib"

  # Job 8: Memory safety and leak detection
  memory-safety:
    name: Memory Safety
    runs-on: ubuntu-latest
    needs: quick-checks
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust nightly with MIRI
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: miri
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: miri
        workspaces: fs-core
    
    - name: Run MIRI on unit tests
      run: |
        cd fs-core
        cargo miri test --lib
      env:
        MIRIFLAGS: -Zmiri-disable-isolation

  # Job 9: Release build validation
  release-validation:
    name: Release Validation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test-unit, test-integration, build-cross-platform]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: release
        workspaces: fs-core
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y fuse3 libfuse3-dev pkg-config
    
    - name: Build optimized release
      run: |
        cd fs-core
        cargo build --release --all-features
    
    - name: Run full test suite
      run: |
        cd fs-core
        cargo test --release --all-features -- --test-threads=1
    
    - name: Validate binary sizes
      run: |
        ls -la fs-core/target/release/aegisfs-*
        # Ensure binaries aren't unexpectedly large (>50MB each)
        find fs-core/target/release -name "aegisfs-*" -type f -size +50M -exec echo "Binary {} is too large" \; -exec exit 1 \;

# Summary job that depends on all others
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: 
      - quick-checks
      - security
      - test-unit
      - test-integration
      - build-cross-platform
      - docker
      - memory-safety
      - release-validation
    if: always()
    steps:
    - name: Check if all jobs succeeded
      run: |
        if [[ "${{ needs.quick-checks.result }}" != "success" || \
              "${{ needs.security.result }}" != "success" || \
              "${{ needs.test-unit.result }}" != "success" || \
              "${{ needs.test-integration.result }}" != "success" || \
              "${{ needs.build-cross-platform.result }}" != "success" || \
              "${{ needs.docker.result }}" != "success" || \
              "${{ needs.memory-safety.result }}" != "success" || \
              "${{ needs.release-validation.result }}" != "success" ]]; then
          echo "One or more required jobs failed"
          exit 1
        else
          echo "All required jobs succeeded"
        fi
